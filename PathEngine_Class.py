# Class where I would like to store parameters and paths generated by the PathEngine and more
import numpy as np
import PathEngine as PathEngine

class PathEngine_Class:
    
    def __init__(self, SpotMatrix:np.array, DriftMatrix:np.array, VolatilityMatrix:np.array, CorrelationMatrix: np.array, T:int=1, dt:float=1/365, Precision:int=6):
        
        # Sanity check
        if not (len(SpotMatrix) == len(DriftMatrix) and len(SpotMatrix) == len(VolatilityMatrix) and len(SpotMatrix) == np.shape(CorrelationMatrix)[0] and dt <= T):
            raise ValueError("The length of the matrices is not the same or dt is greater than T")
        else:
            self.NbAssets = len(SpotMatrix)
            self.SpotMatrix = SpotMatrix
            self.DriftMatrix = DriftMatrix
            self.VolatilityMatrix = VolatilityMatrix
            self.CorrelationMatrix = CorrelationMatrix
            self.dt = dt
            self.T = T
            self.steps = T / dt
            self.Precision = Precision

    def get_paths(self, TypePath:str="Perf"):

        if TypePath not in ("Perf", "Abs"):
            raise ValueError("TypePath must be 'Perf' or 'Abs'")
        else:
            if TypePath == "Perf":
                self.PathsMatrix = 1+PathEngine.Correlated_PathsPerf(self.SpotMatrix,self.DriftMatrix,self.VolatilityMatrix,self.CorrelationMatrix,self.T,self.dt,self.Precision)
            elif TypePath == "Abs":
                self.PathsMatrix = PathEngine.Correlated_PathsAbs(self.SpotMatrix,self.DriftMatrix,self.VolatilityMatrix,self.CorrelationMatrix,self.T,self.dt,self.Precision)
        
        return self.PathsMatrix

    def set_paths(self, TypeTransfomration:str="Worst", weightMatrix:np.array=np.array([0])):
        if TypeTransfomration not in ("Worst", "Best", "Equally"):
            raise ValueError("TypeTransformation must be 'Worst', 'Best', or 'Equally'")
        else:
            if TypeTransfomration == "Worst":
                self.WorstPath = PathEngine.WorstOf_Path(self.PathsMatrix,self.Precision)
                self.WorstValueAtMaturity = PathEngine.Path_EndValues(self.WorstPath)

            elif TypeTransfomration == "Best":
                self.BestPath = PathEngine.BestOf_Path(self.PathsMatrix,self.Precision)
                self.BestValueAtMaturity = PathEngine.Path_EndValues(self.BestPath)

            elif TypeTransfomration == "Equally":
                self.EquallyPath = PathEngine.Path_Average(weightMatrix,self.PathsMatrix, self.Precision)
                self.EqualylValueAtMaturity = PathEngine.Path_EndValues(self.EquallyPath)